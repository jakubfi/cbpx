#!/usr/bin/python2.5

import sys
import logging
import threading

from utils import params, l, parse_cmdline, setup_logging
from network import cbpx_connector, cbpx_listener
from cmd import cmd_runner
from ui import ui_net, ui_readline

# ------------------------------------------------------------------------
# --- MAIN ---------------------------------------------------------------
# ------------------------------------------------------------------------

# parse command line options
try:
    parse_cmdline()
except Exception, e:
    print "Error parsing command line: " + str(e)
    sys.exit(1)

setup_logging()

l.info("cbpx startup")

# start proxy listener and connector threads

try:
    backends = [(params.active_ip, params.active_port), (params.standby_ip, params.standby_port)]

    l.info("Launching Connector")
    connector = cbpx_connector(backends)
    connector.start()

    l.info("Launching Listener")
    listener = cbpx_listener(params.port)
    listener.start()

except Exception, e:
    print "Error starting listener/connector threads: %s" % str(e)
    l.error("Error starting listener/connector threads: %s" % str(e))
    sys.exit(1)

# start command interface (this is in MainThread thread, not separate thread)

try:
    if int(params.rc_port) > 0:
        l.info("Starting command runner with network user interface")
        cmd_runner(ui_net()).run()
    else:
        l.info("Starting commend runner with readline user interface")
        cmd_runner(ui_readline()).run()
except Exception, e:
    print "Error running command interface: %s" % str(e)
    l.error("Error running command interface: %s" % str(e))
    # no sys.exit() here, we need to clean up things a bit

# cleanup and exit
l.debug("Closing listener")
listener.close()
l.debug("Waiting for listener")
listener.join()
l.debug("Closing connector")
connector.close()
l.debug("Waiting for connector")
connector.join()

# the only threads alive now (except MainThread) could be active connection threads (Transport threads)
# This is only if user quit with "force". If so, close those connections.

for th in threading.enumerate():
    if th.getName() == "Transport":
        th.close()

l.info("cbpx exiting")

# vim: tabstop=4 expandtab shiftwidth=4 softtabstop=4
