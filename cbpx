#!/usr/bin/python

import sys
import logging
import threading

from utils import *
from cmd import *
from network import *

# ------------------------------------------------------------------------
# --- MAIN ---------------------------------------------------------------
# ------------------------------------------------------------------------

# parse command line options
try:
    parse_cmdline()
except Exception, e:
    print "Error parsing command line: " + str(e)
    sys.exit(1)

setup_logging()

l.info("cbpx startup")

print_logo()
print_cfg()

# check backends
success = 1
try:
    v_active = test_connection(params.active_ip, params.active_port)
    print " Active backend server version: %s" % v_active
except Exception, e:
    print " Error connecting to active backend: %s " % str(e)
    success = 0
try:
    v_standby = test_connection(params.standby_ip, params.standby_port)
    print " Standby backend server version: %s" % v_standby
except Exception, e:
    print " Error connecting to standby backend: %s " % str(e)
    success = 0

if not success:
    print " Exiting due to backend connection errors."
    sys.exit(1)

# start proxy
try:
    backends = [(params.active_ip, params.active_port), (params.standby_ip, params.standby_port)]

    l.info("Launching Listener")
    listener = cbpx_listener(params.port)
    listener.start()

    l.info("Launching Connector")
    connector = cbpx_connector(backends)
    connector.start()

except Exception, e:
    print "Error starting listener/flusher threads: %s" % str(e)
    l.error("Error starting listener/flusher threads: %s" % str(e))
    sys.exit(1)

if int(params.rc_port) > 0:
    l.info("Runnin in remote control mode")
    rc_setup()
    read_command = rc_read_command

l.info("Entering commandline loop")

print
while True:
    if process_command(): break

# cleanup and exit
l.debug("Closing listener")
listener.close()
l.debug("Waiting for listener")
listener.join()
l.debug("Closing connector")
connector.close()
l.debug("Waiting for connector")
connector.join()

if int(params.rc_port) > 0:
    l.info("Shuttong down remote control")
    rc_shutdown()

print " Bye."
l.info("cbpx exiting")

# vim: tabstop=8 expandtab shiftwidth=4 softtabstop=4
